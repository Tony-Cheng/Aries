{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Input","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","text","e","setState","target","value","preventDefault","onSendMessage","Axios","post","then","res","console","log","catch","err","_this2","react_default","a","createElement","className","onSubmit","onChange","type","placeholder","autoFocus","React","Component","Messages","message","user","curUser","currentUser","whoseMessage","username","style","backgroundColor","colour","_this3","messages","map","m","renderMessage","App","_this4","push","toggle","bind","assertThisInitialized","dropdownOpen","prevState","Navbar","color","light","expand","NavbarBrand","NavbarToggler","onClick","Collapse","isOpen","navbar","Nav","Dropdown","DropdownToggle","caret","DropdownMenu","DropdownItem","list","id","App_Messages","App_Input","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7113bdaf.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.css\";\nimport Axios from \"axios\";\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  Dropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem\n} from \"reactstrap\";\n\nclass Input extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { text: \"\" };\n  }\n\n  onChange(e) {\n    this.setState({ text: e.target.value });\n  }\n\n  onSubmit(e) {\n    e.preventDefault();\n    this.setState({ text: \"\" });\n    this.props.onSendMessage(this.state.text);\n    Axios.post(\"/\", \"MEMES\").then(res => console.log(res)).catch(err => console.log(\"FAILED\"));\n  }\n\n  render() {\n    return (\n      <div className=\"Input\">\n        <form onSubmit={e => this.onSubmit(e)}>\n          <input\n            onChange={e => this.onChange(e)}\n            value={this.state.text}\n            type=\"text\"\n            placeholder=\"Enter a message...\"\n            autoFocus=\"true\"\n          />\n        </form>\n      </div>\n    );\n  }\n}\n\nclass Messages extends React.Component {\n  renderMessage(message) {\n    const { user, text } = message;\n    const curUser = this.props.currentUser;\n    const whoseMessage =\n      user.username === curUser.username\n        ? \"Messages-message curUser\"\n        : \"Messages-message\";\n    return (\n      <li className={whoseMessage}>\n        <span className=\"profilePic\" style={{ backgroundColor: user.colour }} />\n        <div className=\"Message-content\">\n          <div className=\"username\">{user.username}</div>\n          <div className=\"text\">{text}</div>\n        </div>\n      </li>\n    );\n  }\n\n  render() {\n    const { messages } = this.props;\n    return (\n      <u1 className=\"Messages-list\">\n        {messages.map(m => this.renderMessage(m))}\n      </u1>\n    );\n  }\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.toggle = this.toggle.bind(this);\n    this.state = {\n      messages: [\n        {\n          text: \"test\",\n          user: {\n            colour: \"#00FF00\",\n            username: \"user2\"\n          }\n        }\n      ],\n      user: {\n        username: \"user1\",\n        colour: \"#008000\"\n      },\n      dropdownOpen: false\n    };\n  }\n\n  onSendMessage = message => {\n    const messages = this.state.messages;\n    messages.push({\n      text: message,\n      user: this.state.user\n    });\n    this.setState({ messages: messages });\n  };\n\n  toggle() {\n    this.setState(prevState => ({\n      dropdownOpen: !prevState.dropdownOpen\n    }));\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"bg-dark\">\n          <Navbar color=\"black\" light expand=\"md\">\n            <NavbarBrand>Aries Messenger</NavbarBrand>\n            <NavbarToggler onClick={this.toggle} />\n            <Collapse isOpen={this.state.isOpen} navbar>\n              <Nav className=\"ml-auto\" navbar>\n                <Dropdown isOpen={this.state.dropdownOpen} toggle={this.toggle}>\n                  <DropdownToggle className=\"Friends-list\" caret>\n                    Friends List\n                  </DropdownToggle>\n                  <DropdownMenu>\n                    <DropdownItem>Test</DropdownItem>\n                  </DropdownMenu>\n                </Dropdown>\n                <input list=\"friends\" type=\"text\" placeholder=\"Find a friend\" />\n                <datalist id=\"friends\">\n                  <option value=\"text\" />\n                </datalist>\n              </Nav>\n            </Collapse>\n          </Navbar>\n        </div>\n        <h1 className=\"Conversation-friends\">\n          {this.state.messages[0].user.username}\n        </h1>\n        <Messages\n          messages={this.state.messages}\n          currentUser={this.state.user}\n        />\n        <Input onSendMessage={this.onSendMessage} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}