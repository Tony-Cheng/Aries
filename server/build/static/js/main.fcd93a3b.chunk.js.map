{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Input","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","text","e","setState","target","value","preventDefault","onSendMessage","Axios","post","then","res","console","log","catch","err","_this2","react_default","a","createElement","className","onSubmit","onChange","type","placeholder","autoFocus","React","Component","Messages","message","user","curUser","currentUser","whoseMessage","username","style","backgroundColor","colour","_this3","messages","map","m","renderMessage","App","_this4","socket","emit","userid","on","msg","push","ClientSocket","toggle","bind","assertThisInitialized","Cookies","get","dropdownOpen","prevState","Navbar","color","light","expand","NavbarBrand","NavbarToggler","onClick","Collapse","isOpen","navbar","Nav","Dropdown","DropdownToggle","caret","DropdownMenu","DropdownItem","list","id","App_Messages","App_Input","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fcd93a3b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./App.css\";\r\nimport \"../node_modules/bootstrap/dist/css/bootstrap.css\";\r\nimport Axios from \"axios\";\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  Dropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem\r\n} from \"reactstrap\";\r\nimport ClientSocket from \"socket.io-client\";\r\nimport Cookies from \"js-cookie\";\r\n\r\nclass Input extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { text: \"\" };\r\n  }\r\n\r\n  onChange(e) {\r\n    this.setState({ text: e.target.value });\r\n  }\r\n\r\n  onSubmit(e) {\r\n    e.preventDefault();\r\n    this.setState({ text: \"\" });\r\n    this.props.onSendMessage(this.state.text);\r\n    Axios.post(\"/messenger\", \"MEMES\").then(res => console.log(res)).catch(err => console.log(\"FAILED\"));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Input\">\r\n        <form onSubmit={e => this.onSubmit(e)}>\r\n          <input\r\n            onChange={e => this.onChange(e)}\r\n            value={this.state.text}\r\n            type=\"text\"\r\n            placeholder=\"Enter a message...\"\r\n            autoFocus=\"true\"\r\n          />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Messages extends React.Component {\r\n  renderMessage(message) {\r\n    const { user, text } = message;\r\n    const curUser = this.props.currentUser;\r\n    const whoseMessage =\r\n      user.username === curUser.username\r\n        ? \"Messages-message curUser\"\r\n        : \"Messages-message\";\r\n    return (\r\n      <li className={whoseMessage}>\r\n        <span className=\"profilePic\" style={{ backgroundColor: user.colour }} />\r\n        <div className=\"Message-content\">\r\n          <div className=\"username\">{user.username}</div>\r\n          <div className=\"text\">{text}</div>\r\n        </div>\r\n      </li>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { messages } = this.props;\r\n    return (\r\n      <u1 className=\"Messages-list\">\r\n        {messages.map(m => this.renderMessage(m))}\r\n      </u1>\r\n    );\r\n  }\r\n}\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.socket = new ClientSocket();\r\n    this.toggle = this.toggle.bind(this);\r\n    this.state = {\r\n      messages: [\r\n        {\r\n          text: \"test\",\r\n          user: {\r\n            colour: \"#00FF00\",\r\n            username: \"user2\"\r\n          }\r\n        }\r\n      ],\r\n      user: {\r\n        username: \"user1\",\r\n        colour: \"#008000\",\r\n        userid: Cookies.get('user_id')\r\n      },\r\n      dropdownOpen: false\r\n    };\r\n  }\r\n\r\n  onSendMessage = message => {\r\n    const messages = this.state.messages;\r\n    this.socket.emit('newMessage', {userid: this.state.user.userid, text: message});\r\n    this.socket.on('receiveMessage', (msg) => {\r\n      console.log(msg);\r\n    })\r\n    messages.push({\r\n      text: message,\r\n      user: this.state.user\r\n    });\r\n    this.setState({ messages: messages });\r\n  };\r\n\r\n  toggle() {\r\n    this.setState(prevState => ({\r\n      dropdownOpen: !prevState.dropdownOpen\r\n    }));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"bg-dark\">\r\n          <Navbar color=\"black\" light expand=\"md\">\r\n            <NavbarBrand>Aries</NavbarBrand>\r\n            <NavbarToggler onClick={this.toggle} />\r\n            <Collapse isOpen={this.state.isOpen} navbar>\r\n              <Nav className=\"ml-auto\" navbar>\r\n                <Dropdown isOpen={this.state.dropdownOpen} toggle={this.toggle}>\r\n                  <DropdownToggle className=\"Friends-list\" caret>\r\n                    Friends List\r\n                  </DropdownToggle>\r\n                  <DropdownMenu>\r\n                    <DropdownItem>Test</DropdownItem>\r\n                  </DropdownMenu>\r\n                </Dropdown>\r\n                <input list=\"friends\" type=\"text\" placeholder=\"Find a friend\" />\r\n                <datalist id=\"friends\">\r\n                  <option value=\"text\" />\r\n                </datalist>\r\n              </Nav>\r\n            </Collapse>\r\n          </Navbar>\r\n        </div>\r\n        <h1 className=\"Conversation-friends\">\r\n          {this.state.messages[0].user.username}\r\n        </h1>\r\n        <Messages\r\n          messages={this.state.messages}\r\n          currentUser={this.state.user}\r\n        />\r\n        <Input onSendMessage={this.onSendMessage} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}